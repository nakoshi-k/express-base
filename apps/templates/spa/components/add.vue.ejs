<template>
<div class="resource column column-75">
  <h2>Add</h2>
  <form :action="action" method="post" v-on:submit.prevent="save">
    <%_ fields.forEach(function (field) { _%>
      <%_
      if( ["updated_at", "created_at" , 'id'].indexOf(field.name)  >= 0 ) {
        return;
        }
      if( /"type" : "hidden"/.test(field.attr) ) { _%>
      <input type="hidden" name="<%- field.name %>" @change="change" :class="validationClass( errors , '<%= field.name %>')" :value="entity.<%= field.name %>">
      <%_
        return;
      } _%>

      <%_
      if( field.tag === "input" ) {
      _%>
      <div class="form-item">
        <label for="<%= field.name %>"><%= field.name %></label>
        <input <%- field.attrString %> name="<%- field.name %>" @change="change" :class="validationClass( errors , '<%= field.name %>')" :value="entity.<%= field.name %>" placeholder="<%= field.name %>">
        <div class="errors" v-for="e in errors.<%- field.name %>"> <span class="typcn typcn-warning-outline"></span> {{e.message}} ({{e.type}})</div>
      </div>
      <%_ } _%>
      <%_
      if( field.tag === "textarea" ) {
      _%>
      <div class="form-item">
        <label for="<%= field.name %>"><%= field.name %></label>
        <textarea <%- field.attrString %> name="<%- field.name %>" @change="change" :class="validationClass( errors , '<%= field.name %>')" :value="entity.<%= field.name %>" placeholder="<%= field.name %>"></textarea>
        <div class="errors" v-for="e in errors.<%- field.name %>"> <span class="typcn typcn-warning-outline"></span> {{e.message}} ({{e.type}})</div>
      </div>
      <%_ } _%>
    <%_ }); _%>
    <button type="submit" :class="validationClass(errors , 'submit')">update</button>
  </form>
</div>
</template>

<script lang="ts">
import Vue from 'vue'
import Component from 'vue-class-component'
import {mapGetters,mapState,mapActions,mapMutations} from 'vuex'
import * as flatpickr from "flatpickr";
import * as confirmDatePlugin from "../../../node_modules/flatpickr/src/plugins/confirmDate/confirmDate.js";
import form_validation from "../../spa/utility/validation";

Component.registerHooks([
  'beforeRouteEnter',
  'beforeRouteLeave',
  'asyncData',
  'fetch',
  'middleware',
  'layout',
  'transition',
  'scrollToTop'
])

@Component({
  name : "add",
  computed : {
    ...mapGetters([
      'domain' , 'token'
    ]),
    ...mapState("<%- names %>" , {
        entity : ({entity}) =>  entity,
        mount : ({mount}) => mount 
    }),
  },
  methods : {
    ...mapActions( "<%- names %>" , 
      ["insertEntity" , "clearEntity" ,"copyEntity"]
    ),
    ...mapMutations( "<%- names %>" , 
      ["updateEntity" , "setErrors"]
    ),
    ...mapMutations( "loading" , 
      ["loading","endLoading"]
    ),
    ...form_validation.map(["validationClass"])
  }
})

export default class add extends Vue {
  /*from mutations */
  updateEntity:(kv) => {}//from mutations
  insertEntity:any;//from mutations
  loading:() => {};
  endLoading:(status:string) => {};
  token : string;
  mount : string
  clearEntity:() => {}
  
  get action(){
    return `${this.mount}`
  }

  entity : {
    title : "",
    priod : ""
    errors : {}
  }
   
  change = (e) => {
    let kv = {}
    kv["key"] = e.target.name;
    kv["value"] = e.target.value;
    this.updateEntity(kv);
  }

  copyEntity:(any) => {};
  mounted(){
    if(window){
      flatpickr(".calendar" , {
        "enableTime": true,
        "plugins": [confirmDatePlugin({})]
      });
    }
    this.clearEntity();
    let query = this.$store.state.route.query;
    if(query["copy"]){
      this.copyEntity({ id : query["copy"] , mount : this.mount });
    }
  }

  beforeDestroy(){
    this.clearEntity();
  }
  
  errors = {};

  save(){
    this.loading();
    this.insertEntity(this.token).then(r => {
      this.endLoading("success");
      this.$router.push({path : this.mount})
    }).catch( e => {
      this.errors = e;
      this.endLoading("warning");
    });
    return false;
  }
/*
  validationClass(errors , name){
    if(name === "submit"){
       if( (Object.keys(errors).length > 0) ){
         return "warning"
       }
    }
    if(errors[name]){
      return "warning"
    }
  }
*/
}
</script>
