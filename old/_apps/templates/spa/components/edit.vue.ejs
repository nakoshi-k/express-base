<template>
<div class="edit">
  <h2>Edit</h2>
  <form :action="action" method="post" v-on:submit.prevent="save">
    <fieldset>
    <%_ fields.forEach(function (field) { _%>
      <%_
      if( ["updated_at", "created_at"].indexOf(field.name)  >= 0 ) {
        return
        }
      if( /"type" : "hidden"/.test(field.attr) ) { _%>
      <input type="hidden" name="<%- field.name %>" @change="change" :class="validationClass( errors , '<%= field.name %>')" :value="entity.<%= field.name %>">
      <%_
        return
      } _%>

      <%_
      if( field.tag === "input" ) {
      _%>
      <div class="form-item">
        <label for="<%= field.name %>"><%= inflection.humanize(field.name) %></label>
        <input <%- field.attrString %> name="<%- field.name %>" @change="change" :class="validationClass( errors , '<%= field.name %>')" :value="entity.<%= field.name %>" placeholder="<%= field.name %>">
        <div class="errors" v-for="e in errors.<%- field.name %>"> <span class="typcn typcn-warning-outline"></span> {{e.message}} ({{e.type}})</div>
      </div>
      <%_ } _%>
      <%_
      if( field.tag === "textarea" ) {
      _%>
      <div class="form-item">
        <label for="<%= field.name %>"><%= inflection.humanize(field.name) %></label>
        <textarea <%- field.attrString %> name="<%- field.name %>" @change="change" :class="validationClass( errors , '<%= field.name %>')" :value="entity.<%= field.name %>" placeholder="<%= field.name %>"></textarea>
        <div class="errors" v-for="e in errors.<%- field.name %>"> <span class="typcn typcn-warning-outline"></span> {{e.message}} ({{e.type}})</div>
      </div>
      <%_ } _%>
    <%_ }); _%>
    </fieldset>
    <button type="submit" :class="validationClass(errors,'submit')">update</button>
  </form>
</div>
</template>

<script lang="ts">
import Vue from 'vue'
import Component from 'vue-class-component'
import {mapGetters,mapState,mapActions,mapMutations} from 'vuex'
import * as flatpickr from "flatpickr"
import * as confirmDatePlugin from "../../../node_modules/flatpickr/src/plugins/confirmDate/confirmDate.js"
import form_validation from "../../spa/utility/validation"


Component.registerHooks([
  'beforeRouteEnter',
  'beforeRouteLeave',
  'asyncData',
  'fetch',
  'middleware',
  'layout',
  'transition',
  'scrollToTop'
])

@Component({
  name : "edit",
  computed : {
    ...mapGetters([
      'domain' , 'token'
    ]),
    ...mapState("<%- names %>" , {
        entity : ({entity}) =>  entity,
        mount : ({mount}) => mount 
    }),
  },
  methods : {
    ...mapActions( "<%- names %>" , 
      ["fetchEntity" , "saveEntity"]
    ),
    ...mapMutations( "<%- names %>" , 
      ["updateEntity"]
    ),
    ...mapMutations( "loading" , 
      ["loading","endLoading"]
    ),
    ...form_validation.map(["validationClass"])
  }

})

export default class edit extends Vue {
  mount:string
  entity:{
    id : string,
    title : string,
    priod : string,
  }
  asyncData ({ store, route }) {
    return store.dispatch('<%- names %>/fetchEntity' , route )
  }
 
  get action(){
    return `${this.mount}/${this.entity.id}`

  }
  updateEntity:(kv) => {}
  change = (e) => {
    let kv = {}
    kv["key"] = e.target.name
    kv["value"] = e.target.value
    this.updateEntity(kv)
  }

  mounted(){
    if(window){
      flatpickr(".calendar" , {
        "enableTime": true,
        "plugins": [confirmDatePlugin({})]
      })
    }
  }
  token : string
  saveEntity:(token : string) => Promise<string>
  loading : () => {}
  endLoading: (status) => {}
  errors = {}
  save(){
    this.loading()
    this.saveEntity(this.token).then(r => {
      this.errors = {}
      this.endLoading("success")
    }).catch(e => {
      this.errors = e
      this.endLoading("warning")
    })
  }
  

}
</script>
