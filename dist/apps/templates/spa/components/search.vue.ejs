<template>
    <div class="search">
      <form :action="action" method="get" v-on:submit.prevent="search()">
        <fieldset>
        <%_ fields.forEach(function (field) { 
            if( field.name === "id" ){
              field.attrString = 'type="text"';
            }
          _%>
        <label for="<%= field.name %>"><%= field.name %></label>
        <input <%- field.attrString %> name="<%- field.name %>" v-model="frm.<%= field.name %>" placeholder="<%= field.name %>">
        <%_ }); _%>
        </fieldset>
        <div class="text-right">
          <button type="submit" class="small button"><span class="typcn typcn-zoom"></span> search</button>
        </div>
      </form>
    </div>
</div>
</template>
<script lang="ts">
import Vue from 'vue'
import Component from 'vue-class-component'
import {mapState} from "vuex";
import * as flatpickr from "flatpickr";
import * as confirmDatePlugin from "../../../node_modules/flatpickr/src/plugins/confirmDate/confirmDate.js";
import {build_query} from "../../../base/sideless/build_query";
let bq = new build_query();
Component.registerHooks([
  'beforeRouteEnter',
  'beforeRouteLeave',
  'asyncData',
  'fetch',
  'middleware',
  'layout',
  'transition',
  'scrollToTop'
])

@Component({
  name: 'find',
  computed : {
  ...mapState( 'tasks' , {
    mount : ({mount}) => mount 
  }),
}
})
export default class search extends Vue {
  mount:string;
  
  frm = {
    <%_ fields.forEach(function (field) { _%>
        "<%- field.name %>" : "",
    <%_ }); _%>
  }

  search(){
    let q = bq.http(this.frm);
    this.$router.push(`${this.mount}?${q}`);
  }

  get action(){
    return this.mount;
  }
  
  mounted(){
    if(window){
      flatpickr(".calendar" , {
        "enableTime": true,
        "plugins": [confirmDatePlugin({})]
      });
    }
  }

}
</script>
